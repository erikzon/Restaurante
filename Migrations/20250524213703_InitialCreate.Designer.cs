// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Restaurante.Data;

#nullable disable

namespace Restaurante.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250524213703_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.14");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Restaurante.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Restaurante.Data.Modelos.Categoria", b =>
                {
                    b.Property<int>("CategoriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("CategoriaId");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            CategoriaId = 1,
                            Nombre = "Platos Fuertes"
                        },
                        new
                        {
                            CategoriaId = 2,
                            Nombre = "Bebidas"
                        },
                        new
                        {
                            CategoriaId = 3,
                            Nombre = "Cerveza"
                        },
                        new
                        {
                            CategoriaId = 4,
                            Nombre = "Licor"
                        },
                        new
                        {
                            CategoriaId = 5,
                            Nombre = "Extras"
                        });
                });

            modelBuilder.Entity("Restaurante.Data.Modelos.DetalleOrden", b =>
                {
                    b.Property<int>("DetalleOrdenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cantidad")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrdenId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ProductoId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("DetalleOrdenId");

                    b.HasIndex("OrdenId");

                    b.HasIndex("ProductoId");

                    b.ToTable("DetalleOrdenes");
                });

            modelBuilder.Entity("Restaurante.Data.Modelos.Mesa", b =>
                {
                    b.Property<int>("MesaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Ocupada")
                        .HasColumnType("INTEGER");

                    b.HasKey("MesaId");

                    b.ToTable("Mesas");

                    b.HasData(
                        new
                        {
                            MesaId = 1,
                            Numero = "1",
                            Ocupada = false
                        },
                        new
                        {
                            MesaId = 2,
                            Numero = "2",
                            Ocupada = false
                        },
                        new
                        {
                            MesaId = 3,
                            Numero = "3",
                            Ocupada = false
                        },
                        new
                        {
                            MesaId = 4,
                            Numero = "4",
                            Ocupada = false
                        },
                        new
                        {
                            MesaId = 5,
                            Numero = "5",
                            Ocupada = false
                        },
                        new
                        {
                            MesaId = 6,
                            Numero = "6",
                            Ocupada = false
                        });
                });

            modelBuilder.Entity("Restaurante.Data.Modelos.Orden", b =>
                {
                    b.Property<int>("OrdenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("FechaCierre")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("TEXT");

                    b.Property<int>("MesaId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Propina")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("OrdenId");

                    b.HasIndex("MesaId");

                    b.ToTable("Ordenes");
                });

            modelBuilder.Entity("Restaurante.Data.Modelos.Producto", b =>
                {
                    b.Property<int>("ProductoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("ProductoId");

                    b.HasIndex("CategoriaId");

                    b.ToTable("Productos");

                    b.HasData(
                        new
                        {
                            ProductoId = 1,
                            CategoriaId = 1,
                            Codigo = "T1",
                            Nombre = "Tacos (3) Pastor",
                            Precio = 30m
                        },
                        new
                        {
                            ProductoId = 2,
                            CategoriaId = 1,
                            Codigo = "T2",
                            Nombre = "Tacos (3) Birria",
                            Precio = 30m
                        },
                        new
                        {
                            ProductoId = 3,
                            CategoriaId = 1,
                            Codigo = "T3",
                            Nombre = "Tacos (3) Pollo",
                            Precio = 30m
                        },
                        new
                        {
                            ProductoId = 4,
                            CategoriaId = 1,
                            Codigo = "T4",
                            Nombre = "Tacos (3) Res",
                            Precio = 30m
                        },
                        new
                        {
                            ProductoId = 5,
                            CategoriaId = 1,
                            Codigo = "T1Q",
                            Nombre = "Tacos (3) Queso-Pastor",
                            Precio = 45m
                        },
                        new
                        {
                            ProductoId = 6,
                            CategoriaId = 1,
                            Codigo = "T2Q",
                            Nombre = "Tacos (3) Queso-Birria",
                            Precio = 45m
                        },
                        new
                        {
                            ProductoId = 7,
                            CategoriaId = 1,
                            Codigo = "T3Q",
                            Nombre = "Tacos (3) Queso-Pollo",
                            Precio = 45m
                        },
                        new
                        {
                            ProductoId = 8,
                            CategoriaId = 1,
                            Codigo = "T4Q",
                            Nombre = "Tacos (3) Queso-Res",
                            Precio = 45m
                        },
                        new
                        {
                            ProductoId = 9,
                            CategoriaId = 1,
                            Codigo = "G1",
                            Nombre = "Gringa",
                            Precio = 35m
                        },
                        new
                        {
                            ProductoId = 10,
                            CategoriaId = 1,
                            Codigo = "N1",
                            Nombre = "Nachos de la casa",
                            Precio = 30m
                        },
                        new
                        {
                            ProductoId = 11,
                            CategoriaId = 1,
                            Codigo = "S1",
                            Nombre = "Sopa de Birria",
                            Precio = 25m
                        },
                        new
                        {
                            ProductoId = 12,
                            CategoriaId = 1,
                            Codigo = "N2",
                            Nombre = "Cevinachos",
                            Precio = 35m
                        },
                        new
                        {
                            ProductoId = 13,
                            CategoriaId = 1,
                            Codigo = "C1",
                            Nombre = "Ceviche Tradicional",
                            Precio = 70m
                        },
                        new
                        {
                            ProductoId = 14,
                            CategoriaId = 1,
                            Codigo = "C2",
                            Nombre = "Ceviche Peruano",
                            Precio = 70m
                        },
                        new
                        {
                            ProductoId = 15,
                            CategoriaId = 1,
                            Codigo = "C3",
                            Nombre = "Ceviche Aguachile",
                            Precio = 70m
                        },
                        new
                        {
                            ProductoId = 16,
                            CategoriaId = 1,
                            Codigo = "Ca1",
                            Nombre = "Camarones al Ajillo",
                            Precio = 70m
                        },
                        new
                        {
                            ProductoId = 17,
                            CategoriaId = 2,
                            Codigo = "b1",
                            Nombre = "Jamaica",
                            Precio = 15m
                        },
                        new
                        {
                            ProductoId = 18,
                            CategoriaId = 2,
                            Codigo = "b2",
                            Nombre = "Crema",
                            Precio = 15m
                        },
                        new
                        {
                            ProductoId = 19,
                            CategoriaId = 2,
                            Codigo = "b3",
                            Nombre = "Horchata",
                            Precio = 15m
                        },
                        new
                        {
                            ProductoId = 20,
                            CategoriaId = 2,
                            Codigo = "b4",
                            Nombre = "Tamarindo",
                            Precio = 15m
                        },
                        new
                        {
                            ProductoId = 21,
                            CategoriaId = 2,
                            Codigo = "b5",
                            Nombre = "Limonada",
                            Precio = 15m
                        },
                        new
                        {
                            ProductoId = 22,
                            CategoriaId = 2,
                            Codigo = "b6",
                            Nombre = "Sodas",
                            Precio = 10m
                        },
                        new
                        {
                            ProductoId = 23,
                            CategoriaId = 2,
                            Codigo = "b7",
                            Nombre = "Mineral preparada",
                            Precio = 20m
                        },
                        new
                        {
                            ProductoId = 24,
                            CategoriaId = 2,
                            Codigo = "b8",
                            Nombre = "Mineral con jugo",
                            Precio = 25m
                        },
                        new
                        {
                            ProductoId = 25,
                            CategoriaId = 2,
                            Codigo = "b9",
                            Nombre = "Agua Pura",
                            Precio = 5m
                        },
                        new
                        {
                            ProductoId = 26,
                            CategoriaId = 2,
                            Codigo = "b10",
                            Nombre = "Cafe",
                            Precio = 10m
                        },
                        new
                        {
                            ProductoId = 27,
                            CategoriaId = 3,
                            Codigo = "cer-1",
                            Nombre = "Gallo",
                            Precio = 15m
                        },
                        new
                        {
                            ProductoId = 28,
                            CategoriaId = 3,
                            Codigo = "cer-2",
                            Nombre = "Corona",
                            Precio = 20m
                        },
                        new
                        {
                            ProductoId = 29,
                            CategoriaId = 3,
                            Codigo = "cer-3",
                            Nombre = "Cubetazo Gallo",
                            Precio = 75m
                        },
                        new
                        {
                            ProductoId = 30,
                            CategoriaId = 3,
                            Codigo = "cer-4",
                            Nombre = "Cubetazo Corona",
                            Precio = 100m
                        },
                        new
                        {
                            ProductoId = 31,
                            CategoriaId = 3,
                            Codigo = "cer-5",
                            Nombre = "Michelada",
                            Precio = 35m
                        },
                        new
                        {
                            ProductoId = 32,
                            CategoriaId = 3,
                            Codigo = "cer-6",
                            Nombre = "Picona Gallo",
                            Precio = 18m
                        },
                        new
                        {
                            ProductoId = 33,
                            CategoriaId = 3,
                            Codigo = "cer-7",
                            Nombre = "Picona Tecate",
                            Precio = 15m
                        },
                        new
                        {
                            ProductoId = 34,
                            CategoriaId = 4,
                            Codigo = "lic-1",
                            Nombre = "Suerito",
                            Precio = 25m
                        },
                        new
                        {
                            ProductoId = 35,
                            CategoriaId = 4,
                            Codigo = "lic-2",
                            Nombre = "Botella Venado Light",
                            Precio = 170m
                        },
                        new
                        {
                            ProductoId = 36,
                            CategoriaId = 4,
                            Codigo = "lic-3",
                            Nombre = "1/2 Venado Light o XL",
                            Precio = 85m
                        },
                        new
                        {
                            ProductoId = 37,
                            CategoriaId = 4,
                            Codigo = "lic-4",
                            Nombre = "Quetzalteca preparada",
                            Precio = 25m
                        },
                        new
                        {
                            ProductoId = 38,
                            CategoriaId = 4,
                            Codigo = "lic-5",
                            Nombre = "Botella old parr",
                            Precio = 525m
                        },
                        new
                        {
                            ProductoId = 39,
                            CategoriaId = 4,
                            Codigo = "lic-6",
                            Nombre = "Botella Buchanan's",
                            Precio = 550m
                        },
                        new
                        {
                            ProductoId = 40,
                            CategoriaId = 4,
                            Codigo = "lic-7",
                            Nombre = "Red Label",
                            Precio = 250m
                        },
                        new
                        {
                            ProductoId = 41,
                            CategoriaId = 4,
                            Codigo = "lic-8",
                            Nombre = "Tequila Jose Cuervo",
                            Precio = 250m
                        },
                        new
                        {
                            ProductoId = 42,
                            CategoriaId = 4,
                            Codigo = "lic-9",
                            Nombre = "Tequila Don Julio 70",
                            Precio = 750m
                        },
                        new
                        {
                            ProductoId = 43,
                            CategoriaId = 4,
                            Codigo = "lic-10",
                            Nombre = "Botella Jagermeister",
                            Precio = 500m
                        },
                        new
                        {
                            ProductoId = 44,
                            CategoriaId = 5,
                            Codigo = "ex-1",
                            Nombre = "Helado",
                            Precio = 25m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Restaurante.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Restaurante.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Restaurante.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Restaurante.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Restaurante.Data.Modelos.DetalleOrden", b =>
                {
                    b.HasOne("Restaurante.Data.Modelos.Orden", "Orden")
                        .WithMany("DetalleOrdenes")
                        .HasForeignKey("OrdenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Restaurante.Data.Modelos.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orden");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Restaurante.Data.Modelos.Orden", b =>
                {
                    b.HasOne("Restaurante.Data.Modelos.Mesa", "Mesa")
                        .WithMany("Ordenes")
                        .HasForeignKey("MesaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mesa");
                });

            modelBuilder.Entity("Restaurante.Data.Modelos.Producto", b =>
                {
                    b.HasOne("Restaurante.Data.Modelos.Categoria", "Categoria")
                        .WithMany("Productos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("Restaurante.Data.Modelos.Categoria", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Restaurante.Data.Modelos.Mesa", b =>
                {
                    b.Navigation("Ordenes");
                });

            modelBuilder.Entity("Restaurante.Data.Modelos.Orden", b =>
                {
                    b.Navigation("DetalleOrdenes");
                });
#pragma warning restore 612, 618
        }
    }
}
