@page "/productos/edit"
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize(Roles = "admin")]
@using Microsoft.EntityFrameworkCore
@using Restaurante.Data.Modelos
@inject IDbContextFactory<Restaurante.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Editar</h1>

<h2>Producto</h2>
<hr />
@if (Producto is null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Producto" OnValidSubmit="UpdateProducto" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Producto.ProductoId" value="@Producto.ProductoId" />
                <div class="mb-3">
                    <label for="nombre" class="form-label">Nombre:</label>
                    <InputText id="nombre" @bind-Value="Producto.Nombre" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Producto.Nombre" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="precio" class="form-label">Precio:</label>
                    <InputNumber id="precio" @bind-Value="Producto.Precio" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Producto.Precio" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="codigo" class="form-label">Codigo:</label>
                    <InputText id="codigo" @bind-Value="Producto.Codigo" class="form-control" />
                    <ValidationMessage For="() => Producto.Codigo" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="categoriaid" class="form-label">Categoría:</label>
                    <InputSelect id="categoriaid" @bind-Value="Producto.CategoriaId" class="form-control">
                        <option value="">Seleccione una categoría</option>
                        @foreach (var categoria in Categorias)
                        {
                            <option value="@categoria.CategoriaId">@categoria.Nombre</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Producto.CategoriaId" class="text-danger" />
                </div>

                <button type="submit" class="btn btn-primary">Guardar</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/productos">Regresar a la lista</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int ProductoId { get; set; }

    [SupplyParameterFromForm]
    private Producto? Producto { get; set; }

    private List<Categoria> Categorias = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Producto ??= await context.Productos.Include(m => m.Categoria).FirstOrDefaultAsync(m => m.ProductoId == ProductoId);
        Categorias = await context.Categorias.OrderBy(c => c.Nombre).ToListAsync();

        if (Producto is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateProducto()
    {
        using var context = DbFactory.CreateDbContext();
        Producto!.Categoria = null;
        context.Attach(Producto!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ProductoExists(Producto!.ProductoId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/productos");
    }

    private bool ProductoExists(int productoid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Productos.Any(e => e.ProductoId == productoid);
    }
}
